1. Table-driven agents:
<!DOCTYPE html>
<html>
<head>
    <title>Table-driven Vacuum Agent</title>
    <script>
        function simulateAgent() {
            let statusA = document.getElementById("statusA").value;
            let statusB = document.getElementById("statusB").value;
            let currentLocation = document.getElementById("startLocation").value;
            let steps = parseInt(document.getElementById("steps").value);
            
            let environment = { 'A': statusA, 'B': statusB };
            let output = "";
            
            for (let i = 1; i <= steps; i++) {
                if (environment[currentLocation] === "Dirty") {
                    output += `Step ${i}: Cleaned ${currentLocation}<br>`;
                    environment[currentLocation] = "Clean";
                } else {
                    let nextLocation = currentLocation === 'A' ? 'B' : 'A';
                    output += `Step ${i}: Moved to ${nextLocation}<br>`;
                    currentLocation = nextLocation;
                }
                output += `Environment: { 'A': '${environment['A']}', 'B': '${environment['B']}' }<br><br>`;
            }
            document.getElementById("output").innerHTML = output;
        }
    </script>
</head>
<body>
    <h2>Table-driven Vacuum Cleaner Agent</h2>
    <label>Status of Square A:</label>
    <select id="statusA">
        <option value="Clean">Clean</option>
        <option value="Dirty">Dirty</option>
    </select>
    <br>
    <label>Status of Square B:</label>
    <select id="statusB">
        <option value="Clean">Clean</option>
        <option value="Dirty">Dirty</option>
    </select>
    <br>
    <label>Starting Square:</label>
    <select id="startLocation">
        <option value="A">A</option>
        <option value="B">B</option>
    </select>
    <br>
    <label>Number of Steps:</label>
    <input type="number" id="steps" min="1" value="3">
    <br>
    <button onclick="simulateAgent()">Simulate</button>
    <h3>Output:</h3>
    <div id="output"></div>
</body>
</html>
   
2.1. Simple reflex agents
  
<!DOCTYPE html>
<html>
<head>
    <title>Vacuum Cleaner Agent</title>
    <script>
        class VacuumAgent {
            constructor(modelBased = false) {
                this.modelBased = modelBased;
                this.environment = {};
                this.agentState = { location: 'A', memory: {} };
            }

            initializeEnvironment(stateA, stateB) {
                this.environment = { 'A': stateA, 'B': stateB };
                console.log("Environment initialized!");
                console.log("Initial state:", this.environment);
            }

            perceive() {
                return this.environment[this.agentState.location];
            }

            act() {
                let perception = this.perceive();
                console.log("Step:", this.stepCounter, "Perceived", this.agentState.location, "as", perception);

                if (perception === 'Dirty') {
                    console.log("Action: Cleaned", this.agentState.location);
                    this.environment[this.agentState.location] = 'Clean';
                } else {
                    let newLocation = this.agentState.location === 'A' ? 'B' : 'A';
                    console.log("Action: Moved to", newLocation);
                    this.agentState.location = newLocation;
                }
            }

            run(steps) {
                console.log("Running the agent...");
                this.stepCounter = 1;
                while (this.stepCounter <= steps) {
                    this.act();
                    console.log("Current Environment:", this.environment);
                    if (this.environment['A'] === 'Clean' && this.environment['B'] === 'Clean') {
                        console.log("All rooms are clean. Stopping the agent.");
                        break;
                    }
                    this.stepCounter++;
                }
            }
        }

        function startSimulation() {
            let stateA = document.getElementById("roomA").value;
            let stateB = document.getElementById("roomB").value;
            let steps = parseInt(document.getElementById("steps").value);

            let agent = new VacuumAgent();
            agent.initializeEnvironment(stateA, stateB);
            agent.run(steps);
        }
    </script>
</head>
<body>
    <h2>Vacuum Cleaner Agent Simulation</h2>
    <label>Enter the state of Room A:</label>
    <select id="roomA">
        <option value="Clean">Clean</option>
        <option value="Dirty">Dirty</option>
    </select>
    <br>
    <label>Enter the state of Room B:</label>
    <select id="roomB">
        <option value="Clean">Clean</option>
        <option value="Dirty">Dirty</option>
    </select>
    <br>
    <label>Enter the number of steps:</label>
    <input type="number" id="steps" min="1" value="5">
    <br><br>
    <button onclick="startSimulation()">Start Simulation</button>
</body>
</html>


2.2. Model-based reflex agents:
<!DOCTYPE html>
<html>
<head>
    <title>Model-Based Vacuum Cleaner Agent</title>
    <script>
        class ModelBasedVacuumAgent {
            constructor() {
                this.environment = {};
                this.internalState = { 'A': null, 'B': null };
                this.agentState = { location: 'A' };
            }

            initializeEnvironment(stateA, stateB) {
                this.environment = { 'A': stateA, 'B': stateB };
                this.internalState = { 'A': null, 'B': null };
                console.log("Environment initialized!");
                console.log("Initial state:", this.environment);
            }

            perceive() {
                let perception = this.environment[this.agentState.location];
                this.internalState[this.agentState.location] = perception;
                return perception;
            }

            act() {
                let perception = this.perceive();
                console.log("Step:", this.stepCounter);
                console.log("Perceived", this.agentState.location, "as", perception);
                console.log("Internal State:", this.internalState);

                if (perception === 'Dirty') {
                    console.log("Action: Cleaned", this.agentState.location);
                    this.environment[this.agentState.location] = 'Clean';
                } else {
                    let newLocation = this.agentState.location === 'A' ? 'B' : 'A';
                    console.log("Action: Moved to", newLocation);
                    this.agentState.location = newLocation;
                }
            }

            run(steps) {
                console.log("Running the agent...");
                this.stepCounter = 1;
                while (this.stepCounter <= steps) {
                    this.act();
                    console.log("Current Environment:", this.environment);
                    if (this.environment['A'] === 'Clean' && this.environment['B'] === 'Clean') {
                        console.log("All rooms are clean. Stopping the agent.");
                        break;
                    }
                    this.stepCounter++;
                }
            }
        }

        function startSimulation() {
            let stateA = document.getElementById("roomA").value;
            let stateB = document.getElementById("roomB").value;
            let steps = parseInt(document.getElementById("steps").value);

            let agent = new ModelBasedVacuumAgent();
            agent.initializeEnvironment(stateA, stateB);
            agent.run(steps);
        }
    </script>
</head>
<body>
    <h2>Model-Based Vacuum Cleaner Agent Simulation</h2>
    <label>Enter the state of Room A:</label>
    <select id="roomA">
        <option value="Clean">Clean</option>
        <option value="Dirty">Dirty</option>
    </select>
    <br>
    <label>Enter the state of Room B:</label>
    <select id="roomB">
        <option value="Clean">Clean</option>
        <option value="Dirty">Dirty</option>
    </select>
    <br>
    <label>Enter the number of steps:</label>
    <input type="number" id="steps" min="1" value="5">
    <br><br>
    <button onclick="startSimulation()">Start Simulation</button>
</body>
</html>

3. Hill Climbing search algorithm:

<!DOCTYPE html>
<html>
<head>
    <title>Hill Climbing - Traveling Salesman</title>
    <script>
        function parseInput(input) {
            let lines = input.trim().split("\n");
            let n = parseInt(lines[0]);
            let distances = [];
            for (let i = 1; i <= n; i++) {
                distances.push(lines[i].split(" ").map(Number));
            }
            return { n, distances };
        }

        function calculateTotalDistance(route, distances) {
            let total = 0;
            for (let i = 0; i < route.length - 1; i++) {
                total += distances[route[i]][route[i + 1]];
            }
            return total;
        }

        function getNeighbors(route) {
            let neighbors = [];
            for (let i = 1; i < route.length - 1; i++) {
                for (let j = i + 1; j < route.length; j++) {
                    let newRoute = [...route];
                    [newRoute[i], newRoute[j]] = [newRoute[j], newRoute[i]];
                    neighbors.push(newRoute);
                }
            }
            return neighbors;
        }

        function hillClimbing(n, distances) {
            let currentRoute = Array.from({ length: n }, (_, i) => i);
            let currentDistance = calculateTotalDistance(currentRoute, distances);
            let improving = true;

            while (improving) {
                improving = false;
                let neighbors = getNeighbors(currentRoute);
                for (let neighbor of neighbors) {
                    let neighborDistance = calculateTotalDistance(neighbor, distances);
                    if (neighborDistance < currentDistance) {
                        currentRoute = neighbor;
                        currentDistance = neighborDistance;
                        improving = true;
                    }
                }
            }
            return { bestRoute: currentRoute, totalDistance: currentDistance };
        }

        function runTSP() {
            let input = document.getElementById("tspInput").value;
            let { n, distances } = parseInput(input);
            let result = hillClimbing(n, distances);
            document.getElementById("output").innerHTML = 
                "Best route found: [" + result.bestRoute.join(", ") + "]<br>Total distance: " + result.totalDistance;
        }
    </script>
</head>
<body>
    <h2>Traveling Salesman Problem - Hill Climbing</h2>
    <textarea id="tspInput" rows="6" cols="50" placeholder="Enter matrix input..."></textarea>
    <br>
    <button onclick="runTSP()">Solve TSP</button>
    <h3>Output:</h3>
    <p id="output"></p>
</body>
</html>


 4. 8-puzzle problem:

<!DOCTYPE html>
<html>
<head>
    <title>8-Puzzle Solver - Greedy Best First Search</title>
    <script>
        class Puzzle {
            constructor(state, parent = null, cost = 0) {
                this.state = state;
                this.parent = parent;
                this.cost = cost;
            }
        }

        function heuristic(state, goal) {
            let distance = 0;
            for (let i = 0; i < state.length; i++) {
                for (let j = 0; j < state[i].length; j++) {
                    if (state[i][j] !== 0) {
                        let goalPos = findPosition(goal, state[i][j]);
                        distance += Math.abs(goalPos[0] - i) + Math.abs(goalPos[1] - j);
                    }
                }
            }
            return distance;
        }

        function findPosition(state, value) {
            for (let i = 0; i < state.length; i++) {
                for (let j = 0; j < state[i].length; j++) {
                    if (state[i][j] === value) return [i, j];
                }
            }
        }

        function getNeighbors(puzzle) {
            let moves = [
                [1, 0], [-1, 0], [0, 1], [0, -1]
            ];
            let neighbors = [];
            let zeroPos = findPosition(puzzle.state, 0);
            for (let move of moves) {
                let newRow = zeroPos[0] + move[0];
                let newCol = zeroPos[1] + move[1];
                if (newRow >= 0 && newRow < puzzle.state.length && newCol >= 0 && newCol < puzzle.state.length) {
                    let newState = puzzle.state.map(row => [...row]);
                    [newState[zeroPos[0]][zeroPos[1]], newState[newRow][newCol]] = [newState[newRow][newCol], newState[zeroPos[0]][zeroPos[1]]];
                    neighbors.push(new Puzzle(newState, puzzle));
                }
            }
            return neighbors;
        }

        function greedyBestFirstSearch(initial, goal) {
            let openList = [new Puzzle(initial)];
            let visited = new Set();
            while (openList.length > 0) {
                openList.sort((a, b) => heuristic(a.state, goal) - heuristic(b.state, goal));
                let current = openList.shift();
                if (JSON.stringify(current.state) === JSON.stringify(goal)) {
                    return reconstructPath(current);
                }
                visited.add(JSON.stringify(current.state));
                for (let neighbor of getNeighbors(current)) {
                    if (!visited.has(JSON.stringify(neighbor.state))) {
                        openList.push(neighbor);
                    }
                }
            }
            return null;
        }

        function reconstructPath(puzzle) {
            let path = [];
            while (puzzle) {
                path.push(puzzle.state);
                puzzle = puzzle.parent;
            }
            return path.reverse();
        }

        function parseInput(input) {
            let lines = input.trim().split("\n");
            let n = parseInt(lines[0]);
            let initial = lines.slice(1, n + 1).map(row => row.split(" ").map(Number));
            let goal = Array.from({ length: n * n }, (_, i) => i).reduce((acc, num, index) => {
                if (index % n === 0) acc.push([]);
                acc[acc.length - 1].push(num);
                return acc;
            }, []);
            return { n, initial, goal };
        }

        function runPuzzleSolver() {
            let input = document.getElementById("puzzleInput").value;
            let { n, initial, goal } = parseInput(input);
            let solution = greedyBestFirstSearch(initial, goal);
            let output = document.getElementById("output");
            if (solution) {
                output.innerHTML = "Solution found!<br>" + solution.map(state => state.map(row => row.join(" ")).join("<br>")).join("<br><br>");
            } else {
                output.innerHTML = "No solution found";
            }
        }
    </script>
</head>
<body>
    <h2>8-Puzzle Solver - Greedy Best First Search</h2>
    <textarea id="puzzleInput" rows="6" cols="50" placeholder="Enter puzzle input..."></textarea>
    <br>
    <button onclick="runPuzzleSolver()">Solve Puzzle</button>
    <h3>Output:</h3>
    <p id="output"></p>
</body>
</html>


5.starting location and destination location:

<!DOCTYPE html>
<html>
<head>
    <title>8-Puzzle Solver - Greedy Best First Search</title>
    <script>
        class Puzzle {
            constructor(state, parent = null, cost = 0) {
                this.state = state;
                this.parent = parent;
                this.cost = cost;
            }
        }

        function heuristic(state, goal) {
            let distance = 0;
            for (let i = 0; i < state.length; i++) {
                for (let j = 0; j < state[i].length; j++) {
                    if (state[i][j] !== 0) {
                        let goalPos = findPosition(goal, state[i][j]);
                        distance += Math.abs(goalPos[0] - i) + Math.abs(goalPos[1] - j);
                    }
                }
            }
            return distance;
        }

        function findPosition(state, value) {
            for (let i = 0; i < state.length; i++) {
                for (let j = 0; j < state[i].length; j++) {
                    if (state[i][j] === value) return [i, j];
                }
            }
        }

        function getNeighbors(puzzle) {
            let moves = [
                [1, 0], [-1, 0], [0, 1], [0, -1]
            ];
            let neighbors = [];
            let zeroPos = findPosition(puzzle.state, 0);
            for (let move of moves) {
                let newRow = zeroPos[0] + move[0];
                let newCol = zeroPos[1] + move[1];
                if (newRow >= 0 && newRow < puzzle.state.length && newCol >= 0 && newCol < puzzle.state.length) {
                    let newState = puzzle.state.map(row => [...row]);
                    [newState[zeroPos[0]][zeroPos[1]], newState[newRow][newCol]] = [newState[newRow][newCol], newState[zeroPos[0]][zeroPos[1]]];
                    neighbors.push(new Puzzle(newState, puzzle));
                }
            }
            return neighbors;
        }

        function greedyBestFirstSearch(initial, goal) {
            let openList = [new Puzzle(initial)];
            let visited = new Set();
            while (openList.length > 0) {
                openList.sort((a, b) => heuristic(a.state, goal) - heuristic(b.state, goal));
                let current = openList.shift();
                if (JSON.stringify(current.state) === JSON.stringify(goal)) {
                    return reconstructPath(current);
                }
                visited.add(JSON.stringify(current.state));
                for (let neighbor of getNeighbors(current)) {
                    if (!visited.has(JSON.stringify(neighbor.state))) {
                        openList.push(neighbor);
                    }
                }
            }
            return null;
        }

        function reconstructPath(puzzle) {
            let path = [];
            while (puzzle) {
                path.push(puzzle.state);
                puzzle = puzzle.parent;
            }
            return path.reverse();
        }

        function parseInput(input) {
            let lines = input.trim().split("\n");
            let n = parseInt(lines[0]);
            let initial = lines.slice(1, n + 1).map(row => row.split(" ").map(Number));
            let goal = Array.from({ length: n * n }, (_, i) => i).reduce((acc, num, index) => {
                if (index % n === 0) acc.push([]);
                acc[acc.length - 1].push(num);
                return acc;
            }, []);
            return { n, initial, goal };
        }

        function runPuzzleSolver() {
            let input = document.getElementById("puzzleInput").value;
            let { n, initial, goal } = parseInput(input);
            let solution = greedyBestFirstSearch(initial, goal);
            let output = document.getElementById("output");
            if (solution) {
                output.innerHTML = "Solution found!<br>" + solution.map(state => state.map(row => row.join(" ")).join("<br>")).join("<br><br>");
            } else {
                output.innerHTML = "No solution found";
            }
        }
    </script>
</head>
<body>
    <h2>8-Puzzle Solver - Greedy Best First Search</h2>
    <textarea id="puzzleInput" rows="6" cols="50" placeholder="Enter puzzle input..."></textarea>
    <br>
    <button onclick="runPuzzleSolver()">Solve Puzzle</button>
    <h3>Output:</h3>
    <p id="output"></p>
</body>
</html>




